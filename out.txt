Running peggy on Benchmark with params 
{'axioms': 'peggy/axioms/java_arithmetic_axioms.xml:peggy/axioms/java_operator_axioms.xml:peggy/axioms/java_operator_costs.xml:peggy/axioms/java_util_axioms.xml', 'optimization_level': 'O2', 'tmpFolder': 'tmp', 'pb': 'glpk', 'eto': '500'}
BENCHMARKING java/benchmark/
Benchmark
PEGGY OUTPUT:
b'+ Successfully added axiom file: peggy/axioms/java_operator_axioms.xml\r\n+ Successfully added axiom file: peggy/axioms/java_util_axioms.xml\r\n+ Successfully added axiom file: peggy/axioms/java_operator_costs.xml\r\n+ Successfully added axiom file: peggy/axioms/java_arithmetic_axioms.xml\r\n+ Loading class file Benchmark\r\n+ Optimizing class Benchmark\r\n   - Processing method <Benchmark: void <init>()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 10 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 10\r\nGLPKFormulation: Number of values: 10\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: void <init>()> SUCCESSFUL\r\n      * Optimization took 561\r\n      * PEG2PEGTIME 448\r\n      * PBTIME 304\r\n      * ENGINETIME 6\r\n      * Optimization ratio 2000/2000 = 1.0\r\n      * PEG-based Optimization ratio 2000/2000 = 1.0\r\n   - Done processing method <Benchmark: void <init>()>\r\n   - Processing method <Benchmark: int branchHoistingOriginal(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      ! Error processing method <Benchmark: int branchHoistingOriginal(int)> [\r\n         java.lang.IllegalStateException: Merging unequal values: [917780075:gte(1095164065,468306958), 1264422524:gte(1610302254,1905880395), 903633144:gte(258263938,1454722161), 770226993:gte(535916236,563854132), 1041424409:lte(1905880395,1610302254), 1316342000:gte(1196700271,1074505481), 359199471:lte(1074505481,1196700271), 1007562638:False, 1282341871:gte(1133959554,1074505481), 389750467:lte(1074505481,1133959554), 900284401:gte(2040742903,249120011), 2006582799:gte(1479166627,2084328715), 113324400:lte(249120011,2040742903), 1967810310:gte(1095164065,249120011), 1092208918:gte(182998252,1074505481), 1338114550:gte(258263938,808179962), 199243477:gte(535916236,1905880395), 54024417:lte(1074505481,182998252), 958411794:Eval-1(414336376,563347384), 1580816141:gte(746438261,1799192), 1294152462:gte(746438261,1602192515), 1403233990:Eval-1(153183225,563347384), 332364149:Eval-1(1458413927,563347384), 546372585:Eval-1(1202513768,563347384), 1138991221:Eval-1(1323181551,563347384), 212188598:Eval-1(1990600768,563347384), 1740522451:gte(1094400894,104207118), 1523884610:Eval-1(1018678728,563347384), 824616084:Eval-1(1449241135,563347384), 1735284778:Eval-1(1301667188,563347384), 1663226407:Eval-1(165061524,563347384), 2104443937:Eval-1(740911318,563347384), 1340224863:Eval-1(1033906017,563347384), 550010113:lte(468306958,1095164065), 897342276:Eval-1(1063317366,563347384), 2056425694:Eval-1(140614771,563347384), 169681714:gte(468306958,2048539913), 1863151451:gte(1454722161,435830560), 1163214194:lte(1454722161,258263938), 868248376:gte(563854132,796864672), 1418333625:lte(563854132,535916236), 1821742708:Eval-1(1888691990,563347384), 1339437078:gte(1491824217,1905880395), 257594395:gte(201895355,1074505481), 492077074:gte(1521786097,249120011), 1772344012:lte(1074505481,201895355), 1340504004:lte(1905880395,1491824217), 1886501299:lte(249120011,1521786097), 425791170:gte(19416569,563854132), 2013407828:gte(1919717196,468306958), 1344138303:gte(818167552,1824898305), 897048039:gte(1464106676,1276309898), 1751618666:gte(1166467055,1454722161), 291214003:gte(1663216960,1074505481), 1520745879:lte(1074505481,1663216960), 1939001993:gte(559844786,249120011), 814893701:gte(651101278,1905880395), 65977332:lte(249120011,559844786), 1319008119:gte(1760539307,249120011), 1998357879:lte(1905880395,535916236), 1937429552:Eval-1(2021882667,563347384), 296471515:gte(325572217,2084328715), 1068015866:Eval-1(1803382943,563347384), 293913363:Eval-1(405367202,563347384), 1675949827:gte(2084328715,617444454), 8609603:gte(1276309898,128879368), 702437721:lte(2084328715,1479166627), 1498854269:lte(249120011,1095164065), 1159970756:Eval-1(820336316,563347384), 1062543464:Eval-1(428255464,563347384), 1852901506:gte(468306958,2004251201), 187310254:gte(563854132,527021125), 943701634:gte(1454722161,97721458), 1946256056:lte(808179962,258263938), 590343339:gte(1094400894,249120011), 325163072:gte(960592203,1074505481), 1241693018:gte(699048735,1905880395), 300588789:gte(1479166627,808179962), 2044782821:lte(1074505481,960592203), 1045302926:Eval-1(309368198,563347384), 1494344563:Eval-1(1561712019,563347384), 1142575263:lte(1905880395,651101278), 597815060:gte(746438261,1905880395), 880507105:lte(1799192,746438261)], [1336567294:True]\r\n         \tat eqsat.meminfer.engine.peg.CPEGValueManager.merge(CPEGValueManager.java:156)\r\n         \tat eqsat.meminfer.engine.peg.CPEGValueManager.merge(CPEGValueManager.java:1)\r\n         \tat eqsat.meminfer.engine.basic.EGraphManager$15.notify(EGraphManager.java:1001)\r\n         \tat eqsat.meminfer.engine.basic.EGraphManager$15.notify(EGraphManager.java:1)\r\n         \tat eqsat.meminfer.engine.basic.EGraphManager.postProcess(EGraphManager.java:963)\r\n         \tat eqsat.meminfer.engine.basic.EGraphManager.process(EGraphManager.java:981)\r\n         \tat peggy.analysis.BoundedEngineRunner.runEngine(BoundedEngineRunner.java:82)\r\n         \tat peggy.optimize.PEG2PEGOptimizer.optimize(PEG2PEGOptimizer.java:87)\r\n         \tat peggy.optimize.SingleStageOptimizer.optimize(SingleStageOptimizer.java:73)\r\n         \tat peggy.optimize.java.Main.optimizeAll(Main.java:875)\r\n         \tat peggy.optimize.java.Main.optimizeClass(Main.java:704)\r\n         \tat peggy.optimize.java.Main.main(Main.java:2881)\r\n         \r\n      ]\r\n      * Reverting to original method body\r\n      * Optimization of method <Benchmark: int branchHoistingOriginal(int)> FAILED\r\n   - Processing method <Benchmark: int branchHoistingExpected(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 955 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1726\r\nGLPKFormulation: Number of values: 822\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int branchHoistingExpected(int)> SUCCESSFUL\r\n      * Optimization took 42703\r\n      * PEG2PEGTIME 42655\r\n      * PBTIME 41670\r\n      * ENGINETIME 956\r\n      * Optimization ratio 203/235 = 0.8638297872340426\r\n      * PEG-based Optimization ratio 203/235 = 0.8638297872340426\r\n   - Done processing method <Benchmark: int branchHoistingExpected(int)>\r\n   - Processing method <Benchmark: int conditionalConstantFoldingOriginal(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 16 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 16\r\nGLPKFormulation: Number of values: 14\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int conditionalConstantFoldingOriginal(int)> SUCCESSFUL\r\n      * Optimization took 495\r\n      * PEG2PEGTIME 484\r\n      * PBTIME 450\r\n      * ENGINETIME 13\r\n      * Optimization ratio 50/50 = 1.0\r\n      * PEG-based Optimization ratio 50/50 = 1.0\r\n   - Done processing method <Benchmark: int conditionalConstantFoldingOriginal(int)>\r\n   - Processing method <Benchmark: int conditionalConstantFoldingExpected()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 5 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 5\r\nGLPKFormulation: Number of values: 5\r\n         @ Running solver\r\n         @ No result from ILP solver\r\n      * Original PEG chosen as output\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int conditionalConstantFoldingExpected()> SUCCESSFUL\r\n      * Optimization took 264\r\n      * PEG2PEGTIME 261\r\n      * PBTIME 245\r\n      * ENGINETIME 2\r\n   - Done processing method <Benchmark: int conditionalConstantFoldingExpected()>\r\n   - Processing method <Benchmark: int constantFoldOriginal()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 12 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 9\r\nGLPKFormulation: Number of values: 9\r\n         @ Running solver\r\n         @ No result from ILP solver\r\n      * Original PEG chosen as output\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int constantFoldOriginal()> SUCCESSFUL\r\n      * Optimization took 259\r\n      * PEG2PEGTIME 256\r\n      * PBTIME 239\r\n      * ENGINETIME 5\r\n   - Done processing method <Benchmark: int constantFoldOriginal()>\r\n   - Processing method <Benchmark: int deadLoopDeletionOriginal()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 5 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 5\r\nGLPKFormulation: Number of values: 5\r\n         @ Running solver\r\n         @ No result from ILP solver\r\n      * Original PEG chosen as output\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int deadLoopDeletionOriginal()> SUCCESSFUL\r\n      * Optimization took 244\r\n      * PEG2PEGTIME 241\r\n      * PBTIME 229\r\n      * ENGINETIME 0\r\n   - Done processing method <Benchmark: int deadLoopDeletionOriginal()>\r\n   - Processing method <Benchmark: int functionInliningFoo()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 5 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 5\r\nGLPKFormulation: Number of values: 5\r\n         @ Running solver\r\n         @ No result from ILP solver\r\n      * Original PEG chosen as output\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int functionInliningFoo()> SUCCESSFUL\r\n      * Optimization took 244\r\n      * PEG2PEGTIME 241\r\n      * PBTIME 229\r\n      * ENGINETIME 0\r\n   - Done processing method <Benchmark: int functionInliningFoo()>\r\n   - Processing method <Benchmark: int functionInliningOriginal(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 12 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 12\r\nGLPKFormulation: Number of values: 11\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int functionInliningOriginal(int)> SUCCESSFUL\r\n      * Optimization took 398\r\n      * PEG2PEGTIME 394\r\n      * PBTIME 381\r\n      * ENGINETIME 3\r\n      * Optimization ratio 2004/2004 = 1.0\r\n      * PEG-based Optimization ratio 2004/2004 = 1.0\r\n   - Done processing method <Benchmark: int functionInliningOriginal(int)>\r\n   - Processing method <Benchmark: int functionInliningExpected(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 8 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 8\r\nGLPKFormulation: Number of values: 7\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int functionInliningExpected(int)> SUCCESSFUL\r\n      * Optimization took 369\r\n      * PEG2PEGTIME 363\r\n      * PBTIME 351\r\n      * ENGINETIME 1\r\n      * Optimization ratio 4/4 = 1.0\r\n      * PEG-based Optimization ratio 4/4 = 1.0\r\n   - Done processing method <Benchmark: int functionInliningExpected(int)>\r\n   - Processing method <Benchmark: int ifTrueOriginal(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 5 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 5\r\nGLPKFormulation: Number of values: 5\r\n         @ Running solver\r\n         @ No result from ILP solver\r\n      * Original PEG chosen as output\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int ifTrueOriginal(int)> SUCCESSFUL\r\n      * Optimization took 245\r\n      * PEG2PEGTIME 241\r\n      * PBTIME 229\r\n      * ENGINETIME 1\r\n   - Done processing method <Benchmark: int ifTrueOriginal(int)>\r\n   - Processing method <Benchmark: int ifTrueExpected(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 5 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 5\r\nGLPKFormulation: Number of values: 5\r\n         @ Running solver\r\n         @ No result from ILP solver\r\n      * Original PEG chosen as output\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int ifTrueExpected(int)> SUCCESSFUL\r\n      * Optimization took 246\r\n      * PEG2PEGTIME 243\r\n      * PBTIME 231\r\n      * ENGINETIME 1\r\n   - Done processing method <Benchmark: int ifTrueExpected(int)>\r\n   - Processing method <Benchmark: int infiniteEffectfulLoopOriginal()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 422 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1043\r\nGLPKFormulation: Number of values: 716\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      ! Error processing method <Benchmark: int infiniteEffectfulLoopOriginal()> [\r\n         java.lang.RuntimeException: Bad CFG: Should never happen\r\n         \tat eqsat.revert.RevertCFG.removeEmptyFallBlocks(RevertCFG.java:401)\r\n         \tat eqsat.revert.RevertCFG.simplify(RevertCFG.java:311)\r\n         \tat eqsat.revert.CFGReverter.<init>(CFGReverter.java:38)\r\n         \tat peggy.optimize.SingleStageOptimizer.optimize(SingleStageOptimizer.java:104)\r\n         \tat peggy.optimize.java.Main.optimizeAll(Main.java:875)\r\n         \tat peggy.optimize.java.Main.optimizeClass(Main.java:704)\r\n         \tat peggy.optimize.java.Main.main(Main.java:2881)\r\n         \r\n      ]\r\n      * Reverting to original method body\r\n      * Optimization of method <Benchmark: int infiniteEffectfulLoopOriginal()> FAILED\r\n   - Processing method <Benchmark: int infiniteLoopOriginal()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 1695 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 787\r\nGLPKFormulation: Number of values: 134\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      ! Error processing method <Benchmark: int infiniteLoopOriginal()> [\r\n         java.lang.RuntimeException: Bad CFG: Should never happen\r\n         \tat eqsat.revert.RevertCFG.removeEmptyFallBlocks(RevertCFG.java:401)\r\n         \tat eqsat.revert.RevertCFG.simplify(RevertCFG.java:311)\r\n         \tat eqsat.revert.CFGReverter.<init>(CFGReverter.java:38)\r\n         \tat peggy.optimize.SingleStageOptimizer.optimize(SingleStageOptimizer.java:104)\r\n         \tat peggy.optimize.java.Main.optimizeAll(Main.java:875)\r\n         \tat peggy.optimize.java.Main.optimizeClass(Main.java:704)\r\n         \tat peggy.optimize.java.Main.main(Main.java:2881)\r\n         \r\n      ]\r\n      * Reverting to original method body\r\n      * Optimization of method <Benchmark: int infiniteLoopOriginal()> FAILED\r\n   - Processing method <Benchmark: int loopBasedCodeMotionOriginal()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 2303 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1204\r\nGLPKFormulation: Number of values: 981\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int loopBasedCodeMotionOriginal()> SUCCESSFUL\r\n      * Optimization took 16747\r\n      * PEG2PEGTIME 16735\r\n      * PBTIME 14413\r\n      * ENGINETIME 2304\r\n      * Optimization ratio 190/210 = 0.9047619047619048\r\n      * PEG-based Optimization ratio 190/210 = 0.9047619047619048\r\n   - Done processing method <Benchmark: int loopBasedCodeMotionOriginal()>\r\n   - Processing method <Benchmark: int loopBasedCodeMotionExpected()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 1824 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 721\r\nGLPKFormulation: Number of values: 123\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int loopBasedCodeMotionExpected()> SUCCESSFUL\r\n      * Optimization took 9884\r\n      * PEG2PEGTIME 9877\r\n      * PBTIME 8032\r\n      * ENGINETIME 1825\r\n      * Optimization ratio 190/190 = 1.0\r\n      * PEG-based Optimization ratio 190/190 = 1.0\r\n   - Done processing method <Benchmark: int loopBasedCodeMotionExpected()>\r\n   - Processing method <Benchmark: void loopInvariantCodeMotionOriginal(int,int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 296 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1263\r\nGLPKFormulation: Number of values: 646\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: void loopInvariantCodeMotionOriginal(int,int)> SUCCESSFUL\r\n      * Optimization took 17766\r\n      * PEG2PEGTIME 17705\r\n      * PBTIME 17394\r\n      * ENGINETIME 296\r\n      * Optimization ratio 31459/31519 = 0.9980963863066722\r\n      * PEG-based Optimization ratio 31459/31519 = 0.9980963863066722\r\n   - Done processing method <Benchmark: void loopInvariantCodeMotionOriginal(int,int)>\r\n   - Processing method <Benchmark: void loopInvariantCodeMotionExpected(int,int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 359 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1267\r\nGLPKFormulation: Number of values: 647\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: void loopInvariantCodeMotionExpected(int,int)> SUCCESSFUL\r\n      * Optimization took 18191\r\n      * PEG2PEGTIME 18164\r\n      * PBTIME 17787\r\n      * ENGINETIME 359\r\n      * Optimization ratio 31459/31519 = 0.9980963863066722\r\n      * PEG-based Optimization ratio 31459/31519 = 0.9980963863066722\r\n   - Done processing method <Benchmark: void loopInvariantCodeMotionExpected(int,int)>\r\n   - Processing method <Benchmark: int loopPeelingOriginal(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 2670 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1851\r\nGLPKFormulation: Number of values: 206\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int loopPeelingOriginal(int)> SUCCESSFUL\r\n      * Optimization took 25574\r\n      * PEG2PEGTIME 25553\r\n      * PBTIME 22866\r\n      * ENGINETIME 2673\r\n      * Optimization ratio 330/330 = 1.0\r\n      * PEG-based Optimization ratio 330/330 = 1.0\r\n   - Done processing method <Benchmark: int loopPeelingOriginal(int)>\r\n   - Processing method <Benchmark: int loopPeelingExpected(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 981 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1427\r\nGLPKFormulation: Number of values: 157\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int loopPeelingExpected(int)> SUCCESSFUL\r\n      * Optimization took 18780\r\n      * PEG2PEGTIME 18758\r\n      * PBTIME 17751\r\n      * ENGINETIME 981\r\n      * Optimization ratio 335/335 = 1.0\r\n      * PEG-based Optimization ratio 335/335 = 1.0\r\n   - Done processing method <Benchmark: int loopPeelingExpected(int)>\r\n   - Processing method <Benchmark: void loopStrengthReductionOriginal()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 1178 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 3113\r\nGLPKFormulation: Number of values: 1232\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: void loopStrengthReductionOriginal()> SUCCESSFUL\r\n      * Optimization took 40357\r\n      * PEG2PEGTIME 40342\r\n      * PBTIME 39109\r\n      * ENGINETIME 1178\r\n      * Optimization ratio 31290/31490 = 0.9936487773896475\r\n      * PEG-based Optimization ratio 31290/31490 = 0.9936487773896475\r\n   - Done processing method <Benchmark: void loopStrengthReductionOriginal()>\r\n   - Processing method <Benchmark: void loopStrengthReductionExpected()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 603 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1790\r\nGLPKFormulation: Number of values: 524\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: void loopStrengthReductionExpected()> SUCCESSFUL\r\n      * Optimization took 31035\r\n      * PEG2PEGTIME 31017\r\n      * PBTIME 30395\r\n      * ENGINETIME 603\r\n      * Optimization ratio 31430/31430 = 1.0\r\n      * PEG-based Optimization ratio 31430/31430 = 1.0\r\n   - Done processing method <Benchmark: void loopStrengthReductionExpected()>\r\n   - Processing method <Benchmark: void loopStrengthReductionModifiedOriginal()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 440 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1405\r\nGLPKFormulation: Number of values: 841\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: void loopStrengthReductionModifiedOriginal()> SUCCESSFUL\r\n      * Optimization took 18473\r\n      * PEG2PEGTIME 18460\r\n      * PBTIME 18003\r\n      * ENGINETIME 441\r\n      * Optimization ratio 31720/31720 = 1.0\r\n      * PEG-based Optimization ratio 31720/31720 = 1.0\r\n   - Done processing method <Benchmark: void loopStrengthReductionModifiedOriginal()>\r\n   - Processing method <Benchmark: void loopStrengthReductionModifiedExpected()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 500 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1704\r\nGLPKFormulation: Number of values: 1195\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: void loopStrengthReductionModifiedExpected()> SUCCESSFUL\r\n      * Optimization took 23928\r\n      * PEG2PEGTIME 23893\r\n      * PBTIME 23380\r\n      * ENGINETIME 500\r\n      * Optimization ratio 31520/31520 = 1.0\r\n      * PEG-based Optimization ratio 31520/31520 = 1.0\r\n   - Done processing method <Benchmark: void loopStrengthReductionModifiedExpected()>\r\n   - Processing method <Benchmark: int loopUnrollOriginal(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 2352 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 721\r\nGLPKFormulation: Number of values: 123\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int loopUnrollOriginal(int)> SUCCESSFUL\r\n      * Optimization took 10576\r\n      * PEG2PEGTIME 10554\r\n      * PBTIME 8171\r\n      * ENGINETIME 2354\r\n      * Optimization ratio 190/190 = 1.0\r\n      * PEG-based Optimization ratio 190/190 = 1.0\r\n   - Done processing method <Benchmark: int loopUnrollOriginal(int)>\r\n   - Processing method <Benchmark: int loopUnrollExpected(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 5 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 5\r\nGLPKFormulation: Number of values: 5\r\n         @ Running solver\r\n         @ No result from ILP solver\r\n      * Original PEG chosen as output\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int loopUnrollExpected(int)> SUCCESSFUL\r\n      * Optimization took 258\r\n      * PEG2PEGTIME 255\r\n      * PBTIME 236\r\n      * ENGINETIME 1\r\n   - Done processing method <Benchmark: int loopUnrollExpected(int)>\r\n   - Processing method <Benchmark: int simpleLoopUnswitchOriginal(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 221 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1097\r\nGLPKFormulation: Number of values: 732\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Benchmark: int simpleLoopUnswitchOriginal(int)> SUCCESSFUL\r\n      * Optimization took 16148\r\n      * PEG2PEGTIME 16089\r\n      * PBTIME 15857\r\n      * ENGINETIME 222\r\n      * Optimization ratio 31435/31435 = 1.0\r\n      * PEG-based Optimization ratio 31435/31435 = 1.0\r\n   - Done processing method <Benchmark: int simpleLoopUnswitchOriginal(int)>\r\n+ Done optimizing Benchmark\r\n+ Final results:\r\n   - Skipped methods = 0\r\n   - Buggy methods = 3\r\n   - Total methods = 27\r\n+ Fixing bytecode of method <Benchmark: void <init>()>\r\n+ Fixing bytecode of method <Benchmark: int branchHoistingOriginal(int)>\r\n+ Fixing bytecode of method <Benchmark: int branchHoistingExpected(int)>\r\n+ Fixing bytecode of method <Benchmark: int conditionalConstantFoldingOriginal(int)>\r\n+ Fixing bytecode of method <Benchmark: int conditionalConstantFoldingExpected()>\r\n+ Fixing bytecode of method <Benchmark: int constantFoldOriginal()>\r\n+ Fixing bytecode of method <Benchmark: int deadLoopDeletionOriginal()>\r\n+ Fixing bytecode of method <Benchmark: int functionInliningFoo()>\r\n+ Fixing bytecode of method <Benchmark: int functionInliningOriginal(int)>\r\n+ Fixing bytecode of method <Benchmark: int functionInliningExpected(int)>\r\n+ Fixing bytecode of method <Benchmark: int ifTrueOriginal(int)>\r\n+ Fixing bytecode of method <Benchmark: int ifTrueExpected(int)>\r\n+ Fixing bytecode of method <Benchmark: int infiniteEffectfulLoopOriginal()>\r\n+ Fixing bytecode of method <Benchmark: int infiniteLoopOriginal()>\r\n+ Fixing bytecode of method <Benchmark: int loopBasedCodeMotionOriginal()>\r\n+ Fixing bytecode of method <Benchmark: int loopBasedCodeMotionExpected()>\r\n+ Fixing bytecode of method <Benchmark: void loopInvariantCodeMotionOriginal(int,int)>\r\n+ Fixing bytecode of method <Benchmark: void loopInvariantCodeMotionExpected(int,int)>\r\n+ Fixing bytecode of method <Benchmark: int loopPeelingOriginal(int)>\r\n+ Fixing bytecode of method <Benchmark: int loopPeelingExpected(int)>\r\n+ Fixing bytecode of method <Benchmark: void loopStrengthReductionOriginal()>\r\n+ Fixing bytecode of method <Benchmark: void loopStrengthReductionExpected()>\r\n+ Fixing bytecode of method <Benchmark: void loopStrengthReductionModifiedOriginal()>\r\n+ Fixing bytecode of method <Benchmark: void loopStrengthReductionModifiedExpected()>\r\n+ Fixing bytecode of method <Benchmark: int loopUnrollOriginal(int)>\r\n+ Fixing bytecode of method <Benchmark: int loopUnrollExpected(int)>\r\n+ Fixing bytecode of method <Benchmark: int simpleLoopUnswitchOriginal(int)>\r\n+ Writing class back to optimized/Benchmark.class\r\n+ Total optimization time = 321944 milliseconds\r\n'
END PEGGY OUTPUT
Exception while parsing time
invalid literal for int() with base 10: ''
Failing
PEGGY OUTPUT:
b'+ Successfully added axiom file: peggy/axioms/java_operator_axioms.xml\r\n+ Successfully added axiom file: peggy/axioms/java_util_axioms.xml\r\n+ Successfully added axiom file: peggy/axioms/java_operator_costs.xml\r\n+ Successfully added axiom file: peggy/axioms/java_arithmetic_axioms.xml\r\n+ Loading class file Failing\r\n+ Optimizing class Failing\r\n   - Processing method <Failing: void <init>()>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine saturated in 10 iterations\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 10\r\nGLPKFormulation: Number of values: 10\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Failing: void <init>()> SUCCESSFUL\r\n      * Optimization took 583\r\n      * PEG2PEGTIME 462\r\n      * PBTIME 313\r\n      * ENGINETIME 6\r\n      * Optimization ratio 2000/2000 = 1.0\r\n      * PEG-based Optimization ratio 2000/2000 = 1.0\r\n   - Done processing method <Failing: void <init>()>\r\n   - Processing method <Failing: int simpleLoopUnswitchExpected(int)>\r\n      * Building original PEG\r\n      * Setting up engine\r\n         @ Activating analysis: livsr\r\n         @ Activating analysis: binop\r\n         @ Activating analysis: constant\r\n      * Running engine\r\n      * Engine reached iteration bound of 1000 after 801 milliseconds\r\n      * Building optimal PEG\r\n      * Begin GLPK solving\r\n         @ Writing formulation\r\nGLPKFormulation: Number of nodes: 1048\r\nGLPKFormulation: Number of values: 698\r\n         @ Running solver\r\n         @ GLPK solver returned nonempty result\r\n      * Building reversion graph\r\n      * Building revert CFG\r\n      * Building output CFG\r\n      * Encoding output CFG\r\n      * Optimization completed\r\n      * Optimization of method <Failing: int simpleLoopUnswitchExpected(int)> SUCCESSFUL\r\n      * Optimization took 16380\r\n      * PEG2PEGTIME 16303\r\n      * PBTIME 15451\r\n      * ENGINETIME 802\r\n      * Optimization ratio 31395/31399 = 0.9998726074078792\r\n      * PEG-based Optimization ratio 31395/31399 = 0.9998726074078792\r\n   - Done processing method <Failing: int simpleLoopUnswitchExpected(int)>\r\n+ Done optimizing Failing\r\n+ Final results:\r\n   - Skipped methods = 0\r\n   - Buggy methods = 0\r\n   - Total methods = 2\r\n+ Fixing bytecode of method <Failing: void <init>()>\r\n+ Fixing bytecode of method <Failing: int simpleLoopUnswitchExpected(int)>\r\n+ Writing class back to optimized/Failing.class\r\n+ Total optimization time = 17365 milliseconds\r\n'
END PEGGY OUTPUT
